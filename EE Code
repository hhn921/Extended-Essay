import java.util.List;
import java.util.*;
import java.util.Random;
import java.lang.Object;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.Math;
import java.lang.*;

import java.io.FileInputStream;
import java.io.FileOutputStream;

import junit.framework.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellReference;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;



public class mutateGenome {
	public static void main (String[] args) {
		String filePath = "C:\\\\BLAST\\\\output.txt";
		int cdLength = 1500;
		double cdCompBase = 0.02;
		double cdComp = cdCompBase;
		double cdCompDif = 0.96;
		int repeatsCoeff = 100;
		int mutCoeff = 1000;		
		double ptMutChance =  2.3E-8 * mutCoeff;
		double inMutChance = 2.3E-9 / 2 * mutCoeff;
		double delMutChance = 2.3E-9 / 2 * mutCoeff;
		int manips = 33;
		int numOfTrials = 100;
		double cdComps[] = new double[manips];
		double avgM[] = new double[manips];
		double sigmaM[] = new double[manips];
		double avgSil[] = new double[manips];
		double sigmaSil[] = new double[manips];
		double avgNon[] = new double[manips];
		double sigmaNon[] = new double[manips];
		double avgMis[] = new double[manips];
		double sigmaMis[] = new double[manips];
		double avgOffset[] = new double[manips];
		double sigmaOffset[] = new double[manips];
		String output[][] = new String[manips][11];
		String outputs[] = new String[11];
		for (int i = 0; i < manips; i++) {
			cdComp = cdCompBase + (double)(i)*cdCompDif / (manips - 1);
			double length = cdLength / cdComp;
			int repeats = repeatsCoeff * (int) length;
			double manipStat[] = oneManip(numOfTrials, cdLength, cdComp, repeats, ptMutChance, inMutChance, delMutChance);			
			avgM[i] = manipStat[0];
			sigmaM[i] = manipStat[1];
			avgSil[i] = manipStat[2];
			sigmaSil[i] = manipStat[3];
			avgNon[i] = manipStat[4];
			sigmaNon[i] = manipStat[5];
			avgMis[i] = manipStat[6];
			sigmaMis[i] = manipStat[7];
			avgOffset[i] = manipStat[8];
			sigmaOffset[i] = manipStat[9];
			cdComps[i] = cdComp;
			System.out.println();
			System.out.println();
		}
		System.out.println("Averages: ");
		for (int i = 0; i < manips; i++) {
			String a = String.format("%.5g%n", cdComps[i]);
			String b = String.format("%.5g%n", avgM[i]);
			String c = String.format("%.5g%n", sigmaM[i]);
			String d = String.format("%.5g%n", avgSil[i]);
			String e = String.format("%.5g%n", sigmaSil[i]);
			String f = String.format("%.5g%n", avgNon[i]);
			String g = String.format("%.5g%n", sigmaNon[i]);
			String h = String.format("%.5g%n", avgMis[i]);
			String q = String.format("%.5g%n", sigmaMis[i]);
			String j = String.format("%.5g%n", avgOffset[i]);
			String k = String.format("%.5g%n", sigmaOffset[i]);
			a = a.replaceAll("\\s", "");
			b = b.replaceAll("\\s", "");
			c = c.replaceAll("\\s", "");
			d = d.replaceAll("\\s", "");
			e = e.replaceAll("\\s", "");
			f = f.replaceAll("\\s", "");
			g = g.replaceAll("\\s", "");
			h = h.replaceAll("\\s", "");
			q = q.replaceAll("\\s", "");
			j = j.replaceAll("\\s", "");
			k = k.replaceAll("\\s", "");
			output[i][0] = a;
			output[i][1] = b;
			output[i][2] = c;
			output[i][3] = d;
			output[i][4] = e;
			output[i][5] = f;
			output[i][6] = g;
			output[i][7] = h;
			output[i][8] = q;
			output[i][9] = j;
			output[i][10] = k;
			outputs[0] = "Manip: ";
			outputs[1] = "avgM: ";
			outputs[2] = "sigmaM: ";
			outputs[3] = "avgSil: ";
			outputs[4] = "sigmaSil: ";
			outputs[5] = "avgNon: ";
			outputs[6] = "sigmaNon: ";
			outputs[7] = "avgMis: ";
			outputs[8] = "sigmaMis: ";
			outputs[9] = "avgOffset: ";
			outputs[10] = "sigmaOffset: ";
		}
		writeToFile(output, outputs, filePath, manips, numOfTrials);		
		for (int j = 0; j < 11; j++) {
			System.out.println(outputs[j]);
			for (int i = 0; i < manips; i++) {
			}
		}
	}
	
	public static void writeToFile(String[][] output, String[] outputs, String filePath, int manips, int numOfTrials) {
		try {
	        FileWriter writer = new FileWriter(filePath, false);
	        BufferedWriter bufferedWriter = new BufferedWriter(writer);	        
			for (int j = 0; j < 11; j++) {
				bufferedWriter.write (outputs[j] + ": -------------------------------------");
				bufferedWriter.newLine();
				for (int i = 0; i < manips; i++) {
					bufferedWriter.write (output[i][j]);
					bufferedWriter.newLine();
				}
			}
			float trials = (float) numOfTrials;
			String a = String.format("%.5g%n", trials);
			bufferedWriter.write ("trials: ");
			bufferedWriter.newLine();
			bufferedWriter.write (a);
			bufferedWriter.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	}
	
	public static double[] oneManip(int numOfTrials, int cdLength, double cdComp, int repeats, double ptMutChance, double inMutChance, double delMutChance) {
		int trial = 0;
		List<Double> hitsPerBP = new ArrayList<Double>();
		List<Double> silM = new ArrayList<Double>();
		List<Double> nonM = new ArrayList<Double>();
		List<Double> misM = new ArrayList<Double>();
		List<Double> offset = new ArrayList<Double>();
		System.out.println ("cdLength " + cdLength);
		System.out.println ("cdComp " + cdComp);
		System.out.println ("Trials " + numOfTrials);
		while (trial < numOfTrials) {
			trial += 1;
			System.out.print ("Trial " + trial + ": ");
			int[] info = (oneTrial(cdLength, cdComp, repeats, ptMutChance, inMutChance, delMutChance));
			double modHits = ((double) info[4]) / ((double) info[1]);
			double modSil = ((double) info[5]) / ((double) info[1]);
			double modNon = ((double) info[6]) / ((double) info[1]);
			double modMis = ((double) info[7]) / ((double) info[1]);
			double modOffset = ((double) info[8]) / ((double) info[1]);
			double absModOffset = Math.abs(modOffset);
//			System.out.println("modoffset: " + modOffset);
			hitsPerBP.add(modHits);
			silM.add(modSil);
			nonM.add(modNon);
			misM.add(modMis);
			offset.add(absModOffset);
		}
		double avgM;
		double sigmaM;
		double avgSil;
		double sigmaSil;
		double avgNon;
		double sigmaNon;
		double avgMis;
		double sigmaMis;
		double avgOffset;
		double sigmaOffset;
		double temp[] = new double[2];
				
		temp = getDoubleAvgStd(hitsPerBP, numOfTrials);
		avgM = temp[0];
		sigmaM = temp[1];
		temp = getDoubleAvgStd(silM, numOfTrials);
		avgSil = temp[0];
		sigmaSil = temp[1];
		temp = getDoubleAvgStd(nonM, numOfTrials);
		avgNon = temp[0];
		sigmaNon = temp[1];
		temp = getDoubleAvgStd(misM, numOfTrials);
		avgMis = temp[0];
		sigmaMis = temp[1];
		temp = getDoubleAvgStd(offset, numOfTrials);
		avgOffset = temp[0];
		sigmaOffset = temp[1];
		double stat[] = new double[10];
		stat[0] = avgM;
		stat[1] = sigmaM;
		stat[2] = avgSil;
		stat[3] = sigmaSil;
		stat[4] = avgNon;
		stat[5] = sigmaNon;
		stat[6] = avgMis;
		stat[7] = sigmaMis;
		stat[8] = avgOffset;
		stat[9] = sigmaOffset;
		return stat;
	}
	
	public static int[] oneTrial(int cdLength, double cdComp, int repeats, double ptMutChance, double inMutChance, double delMutChance) {
		int[] info = makeSequence(cdLength, cdComp);
		info = mutateSequence(info, repeats, ptMutChance, inMutChance, delMutChance);
		int length = info[0];
		cdLength = info[1];
		int cdStart = info[2];
		int cdEnd = info[3];
		int hits = info[4];
		int sil = info[5];
		int non = info[6];
		int mis = info[7];		
		int offset = info[8];
		return info;
	}
	
	public static double[] getIntAvgStd (List<Integer> input, int numOfTrials) {
		double total = 0.0;
		for (int i = 0; i < input.size(); i++) { //Average
			total += input.get(i);
		}
		double avg = total / numOfTrials;
				
		total = 0.0;
		for (int i = 0; i < input.size(); i++) { //STD
			total += (input.get(i) - avg)*(input.get(i) - avg);
		}
		double sigma = Math.sqrt(total/input.size());
		
		double stat[] = new double[2];
		stat[0] = avg;
		stat[1] = sigma;
		return stat;
	}
	
	public static double[] getDoubleAvgStd (List<Double> input, int numOfTrials) {
		double total = 0.0;
		for (int i = 0; i < input.size(); i++) { //Average
			total += input.get(i);
		}
		double avg = total / numOfTrials;
				
		total = 0.0;
		for (int i = 0; i < input.size(); i++) { //STD
			total += (input.get(i) - avg)*(input.get(i) - avg);
		}
		double sigma = Math.sqrt(total/input.size());
		
		double stat[] = new double[2];
		stat[0] = avg;
		stat[1] = sigma;
		return stat;
	}
	
	public static int[] makeSequence(int cdLength, double cdComp) {
		int length = (int) (cdLength / cdComp);
		int cdStartMax = length - cdLength;
		int cdStart = (int)(Math.random() * ((cdStartMax) + 1));
		int cdEnd = cdStart + cdLength;		
		int[] info = new int[9];
		info[0] = length;
		info[1] = cdLength;
		info[2] = cdStart;
		info[3] = cdEnd;
		info[4] = 0;
		info[5] = 0;
		info[6] = 0;
		info[7] = 0;
		info[8] = 0;
		
		return info;
	}
	
	public static int[] mutateSequence(int[] info, int repeats, double ptMutChance, double indMutChance, double delMutChance) {
		
		int pos = -1;
		String type = "0";
		Random rnd = new Random();
		for (int j = 0; j < repeats; j++) {
			if (rnd.nextDouble() <= ptMutChance) {
				pos = ptMutation(info);
				type = "pt";
				info = mutParser (info, pos, type);
			}
			if (rnd.nextDouble() <= indMutChance) {
				pos = inMutation(info);
				type = "in";
				info = mutParser (info, pos, type);
			}
			if (rnd.nextDouble() <= delMutChance) {
				pos = delMutation(info);
				type = "del";
				info = mutParser (info, pos, type);
			}
		}
		
		
		return info;
	}
	
	public static int[] mutParser(int[] info, int pos, String type) {
		int length = info[0];
		int cdLength = info[1];
		int cdStart = info[2];
		int cdEnd = info[3];
		int hits = info[4];
		int sil = info[5];
		int non = info[6];
		int mis = info[7];		
		int offset = info[8];
		
		double pSil = (3.047-1)/64;
		double pNon = 3.0/64 + pSil;
		double pMis = 1;
		
		Random rnd = new Random();
		switch (type) {
		case "pt":
			if (pos >= cdStart && pos <= cdEnd) {
				hits++;
				double q = rnd.nextDouble();
				if (q <= pSil) {
					sil++;
				}
				else if (q <= pNon) {
					non++;
				}
				else if (q <= pMis) {
					mis++;
				}
			}
			break;
		case "in":
			if (pos >= cdStart && pos <= cdEnd) {
				hits++;
				offset++;
				}
			if (cdStart > pos) {
				cdStart++;}
			if (cdEnd > pos) {
				cdEnd++;}
			cdLength = cdEnd - cdStart;
			length++;
			break;
		case "del":
			if (pos >= cdStart && pos <= cdEnd) {
				hits++;
				offset--;
				}
			if (cdStart > pos) {
				cdStart--;}
			if (cdEnd > pos) {
				cdEnd--;}
			cdLength = cdEnd - cdStart;
			length--;
			break;
		default:
			break;
		}
		
		info[0] = length;
		info[1] = cdLength;
		info[2] = cdStart;
		info[3] = cdEnd;
		info[4] = hits;
		info[5] = sil;
		info[6] = non;
		info[7] = mis;
		info[8] = offset;
		
		return info;
	}
	
	
	public static int ptMutation(int[] info) {
		int length = info[0];
		int cdLength = info[1];
		int cdStart = info[2];
		int cdEnd = info[3];
		
		Random rand = new Random();
		int pos = rand.nextInt(length);	
		
		return pos;
	}
	public static int inMutation(int[] info) {
		int length = info[0];
		int cdLength = info[1];
		int cdStart = info[2];
		int cdEnd = info[3];
		
		Random rand = new Random();
		int pos = rand.nextInt(length);	
		
		return pos;
	}
	public static int delMutation(int[] info) {
		int length = info[0];
		int cdLength = info[1];
		int cdStart = info[2];
		int cdEnd = info[3];
		
		Random rand = new Random();
		int pos = rand.nextInt(length);	
		
		return pos;
	}
}
